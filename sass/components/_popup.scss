.popup{
    height: 100vh;
    width: 100%;
    position: fixed; // doesnt move when scrolled. just like absolute positioning its taken out of the flow. 
    top: 0; // then we can add top etc
    left: 0;
    background-color: rgba($color-black, .8);
    z-index: 9999; // to make sure its placed before the toggle menu
    opacity: 0; // so we dont see the popup before the button gots clicked with the href:"#poup"
    visibility: hidden; // so we dont see the popup before the button gots clicked with the href:"#poup"
    transition: all .3s;

    @supports (-webkit-backdrop-filter: blur(10px)) or (backdrop-filter: blur(10px)) {
        -webkit-backdrop-filter: blur(10px);
        backdrop-filter: blur(10px);
        background-color: rgba($color-black, .3);
    }

    @include respond(phone-small){
        display: flex;
    }

    &__content{
          // now the positioning of this element inside the popup. once again were using absolute position here: make mixin for this:
        @include absCenter; // mixin absolute positioning

        width: 75%; // always 75% of the container and therefore of the viewport as well. 
        background-color: $color-white;
        box-shadow: 0 2rem 4rem rgba($color-black, .2);
        border-radius: 3px;
        display: table; // to make the left and right table-cells
        overflow: hidden; // zo gaan de images niet meer over de border-radius van 3px heen. de hoeken hadden we wat rond gemaakt en de images maken die weer recht. door dit in te stellen gebeurt dat neit meer. 
        opacity: 0; // om ervoor te zorgen dat de content sectie naar je toe komt van achter vanuit de pagina zeg maar als de popup verschijnt stel je het hier in op opacity:0; en transform voor scale. Maar die transform kan niet omdat de transform ook al in de mixin zit en je kan maar 1 transform per keer doen. nu wordt de laatste toegepast. Je kunt wel twee transform tgelijkertijd toepassen als je het in dezelfde regel zet dus overschijven we nu de transform van de maxin en dan werkt het wel:
        transform: translate (-50%, -50%) scale(0); 
        transition: all .5s .2s; // .2s is for the delay. 

        @include respond(phone-small) {
            width: 100vw;
            display: flex;
            flex-direction: column;
            justify-content: center;
            flex: 2 0 0;
            flex-wrap: wrap;
            align-content: center;
            text-align: center;
            height: 100vh;
        }
    }

    &__left{ // with 2 pictures in it on top of each other
        width: 33.3333333%;
        display: table-cell; // browser will make the table cells the same height.

        @include respond(phone-small) {
            flex: 1 1 0;
        }
    }

    &__right{ // with text in it
        width: 66.6666667%;
        display: table-cell;
        vertical-align: middle; // can be used on table cells
        padding: 3rem 5rem;

        @include respond(phone-small) {
            width: 100vw;
            max-height: 75vh;
            display: flex;
            flex-direction: column;
            padding: 0 2rem;
            align-items: center;
            flex: 2 1 0;
            margin-top: -5rem;
        }
    }

    &__img{
        display: block; // usually good idea to do
        width: 100%; // entire parent container
        @include respond(phone-small) {
            width: 100vw;
            // filter: blur(1px) brightness(65%); 
            position: relative;
            z-index: -10;
            height: 25vh;
            object-fit: cover;
        }
    }

    &__img:last-child{
        @include respond(phone-small) {
            display: none;
        }
    }

    &__text{
        font-size: 1.4rem;
        margin-bottom: 4rem;

        -moz-column-count: 2;
        -moz-column-gap: 4rem;
        -moz-column-rule: 1px solid $color-light-grey-2;

        column-count: 2; // makes 2 columns from the text
        column-gap: 4rem; // specify the space between the columns. Default is 1em. This would be 14px because 1em is always the font-size of the current element. 
        column-rule: 1px solid $color-light-grey-2;// like a border exactly in the middle of the two columns
        
        -moz-hyphens: auto; 
        -ms-hyphens: auto; 
        -webkit-hyphens: auto; 
        hyphens: auto; //auto: dan worden woorden afgebroken met een streepje als ze voor een deel op de volgende regel vallen. manual: is handmatig bepalen welke woorden met een streepje afgebroken moeten worden als een deel op de volgende regel valt. voor deze property moet je de language bovenaan je html hebben gespecificeerd in de taal die je gebruikt op je website. needs some prefixes to work. same goed for columns. kunt hiervoor tools gebruiken ipv het handmatig doen. 1 is auto prefixer. verteld hij later over. 

        @include respond(phone-small) {
            margin-bottom: 0;
            display: flex;
            column-count: unset;
            -moz-column-count: unset;
            padding: 0 2rem 2rem;
            line-height: 1.2;
            text-align: justify;
        }
    }
    // open states
     // So when we click that button then the anchor will basically become this popup. So the target, remember I called it the target, okay. So this popup here will become the target. And so what we can we do here is to simply say and that's actually it. So we have the pseudo class called target, which applies to the element which is the target when we click on a button, or basically when the URL changes to having target in it. the url of the pages changes with in the end #popup in it. The target is on this popup so we can do it like this: 
    &:target{
        opacity: 1;
        visibility: visible;
    }
    // To make the box, basically coming in toward the user from the back of the page zooming in towards us. We want to style the content, at the moment where the popup is open. This happens when the popup becomes the target. So the popup becomes the target end then we simply style the child element of the popup: 
    &:target &__content{
        opacity: 1;
        transform: translate(-50%, -50%) scale(1);
    }

    // to position het kruis teken op de popup. Dus de manier om de popup af te sluiten
    &__close{
        &:link,
        &:visited{
            color: $color-dark-grey;
            position: absolute; // it will be positioned relative to the popup__content. Its parent is popup__right but this parent doesnt have a defined position but the popup content has so it will be positioned relative to the popup content.
            top: 2.5rem;
            right: 2.5rem;
            font-size: 3rem;
            text-decoration: none;
            display: inline-block;
            transition: all .2s;
            // It's placed a little bit to high because this is text and so it has this pre-defined line height that we defined. So we should just set the line height to one
            line-height: 1;

            @include respond(phone-small) {
                font-size: 5rem;
                right: 4rem;
                color: $color-white;
            }
        }

        &:hover, &:active{
            color: $color-primary;
        }
    }
}